// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Role-specific profiles
  patient         Patient?
  pharmacy        Pharmacy?
  deliveryPartner DeliveryPartner?
  laboratory      Laboratory?
  doctor          Doctor?
  admin           Admin?

  // Relations
  orders        Order[]
  transactions  Transaction[]
  notifications Notification[]

  @@map("users")
}

model Patient {
  id       String @id @default(cuid())
  userId   String @unique
  phone    String?
  address  String?
  dateOfBirth DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations
  prescriptions Prescription[]
  orders        Order[]
  
  @@map("patients")
}

model Pharmacy {
  id          String  @id @default(cuid())
  userId      String  @unique
  name        String
  address     String
  phone       String
  license     String
  latitude    Float?
  longitude   Float?
  isApproved  Boolean @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations
  medicines   Medicine[]
  orders      Order[]
  
  @@map("pharmacies")
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  role   AdminRole @default(SUPER_ADMIN)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("admins")
}

model DeliveryPartner {
  id           String  @id @default(cuid())
  userId       String  @unique
  vehicleType  String
  licenseNumber String
  phone        String
  address      String
  latitude     Float?
  longitude    Float?
  isAvailable  Boolean @default(true)
  isApproved   Boolean @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations
  deliveries Delivery[]
  
  @@map("delivery_partners")
}

model Laboratory {
  id          String  @id @default(cuid())
  userId      String  @unique
  name        String
  address     String
  phone       String
  license     String
  latitude    Float?
  longitude   Float?
  isApproved  Boolean @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations
  labTests    LabTest[]
  labBookings LabBooking[]
  
  @@map("laboratories")
}

model Doctor {
  id             String  @id @default(cuid())
  userId         String  @unique
  specialization String
  qualifications String
  experience     Int     // years
  consultationFee Float
  phone          String
  address        String?
  license        String
  isApproved     Boolean @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations
  availabilities DoctorAvailability[]
  appointments   Appointment[]
  
  @@map("doctors")
}

model DoctorAvailability {
  id        String   @id @default(cuid())
  doctorId  String
  dayOfWeek Int      // 0-6 (Sunday to Saturday)
  startTime String   // HH:MM format
  endTime   String   // HH:MM format
  isActive  Boolean  @default(true)
  
  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  
  @@map("doctor_availabilities")
}

model Medicine {
  id          String  @id @default(cuid())
  pharmacyId  String
  name        String
  description String?
  price       Float
  unit        String  // tablet, ml, mg, etc.
  stock       Int     @default(0)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  pharmacy Pharmacy @relation(fields: [pharmacyId], references: [id], onDelete: Cascade)
  
  // Relations
  orderItems OrderItem[]
  
  @@map("medicines")
}

model Prescription {
  id        String   @id @default(cuid())
  patientId String
  fileName  String
  filePath  String
  fileSize  Int
  mimeType  String
  status    PrescriptionStatus @default(UPLOADED)
  createdAt DateTime @default(now())
  
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  // Relations
  orders Order[]
  
  @@map("prescriptions")
}

model Order {
  id             String      @id @default(cuid())
  userId         String      // Add userId for the relation
  patientId      String
  pharmacyId     String
  prescriptionId String?
  status         OrderStatus @default(PENDING)
  totalAmount    Float
  commissionRate Float       @default(0.05) // 5% default commission
  commissionAmount Float
  netAmount      Float       // Amount after commission deduction
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  user         User         @relation(fields: [userId], references: [id])
  patient      Patient      @relation(fields: [patientId], references: [id])
  pharmacy     Pharmacy     @relation(fields: [pharmacyId], references: [id])
  prescription Prescription? @relation(fields: [prescriptionId], references: [id])
  
  // Relations
  orderItems   OrderItem[]
  transactions Transaction[]
  
  @@map("orders")
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  medicineId String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  medicine Medicine @relation(fields: [medicineId], references: [id])
  
  @@map("order_items")
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String
  orderId       String
  type          TransactionType
  amount        Float
  status        TransactionStatus @default(PENDING)
  paymentMethod String           @default("MOCK_STRIPE")
  paymentId     String?          // Mock payment ID
  createdAt     DateTime         @default(now())
  
  user  User  @relation(fields: [userId], references: [id])
  order Order @relation(fields: [orderId], references: [id])
  
  @@map("transactions")
}

// Enums
enum UserRole {
  PATIENT
  PHARMACY
  DELIVERY_PARTNER
  LABORATORY
  DOCTOR
  ADMIN
  SYSTEM
}

enum AdminRole {
  SUPER_ADMIN
  PHARMACY_ADMIN
  PATIENT_ADMIN
  LAB_ADMIN
  DOCTOR_ADMIN
}

enum PrescriptionStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  READY_FOR_DELIVERY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum LabTestStatus {
  BOOKED
  SAMPLE_COLLECTED
  IN_PROGRESS
  COMPLETED
  REPORT_READY
}

enum TransactionType {
  PAYMENT
  COMMISSION
  PAYOUT
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  ORDER_UPDATE
  APPOINTMENT_REMINDER
  LAB_REPORT_READY
  DELIVERY_UPDATE
  PAYMENT_CONFIRMATION
  SYSTEM_ALERT
}